const meow = require("meow");
const { Client } = require("@elastic/elasticsearch");

const meow_help = `
Usage 
$ publish-coverage <input>

Options
  --index, -ix         Index name in elastic search (e.g. coverage_stats-YYYY.MM)
                       YYYY, MM will be replaced with actual date
  --file, -f           Path to coverage-summary.json
  --elasticUrl, -url   Elastic Search url (default http://localhost:9200)
  --debug, -r          Output debug information
  --appName            Name of the application, added to metrics
  --appVersion         Version of the application, added to metrics
  --package            Path to package.json to read application name and version from
                       (takes precedence over --appName & --appVersion)

Examples

$ publish-coverage \\
    --index="coverage-YYYY.MM" \\
    --file="coverage/report-html/coverage-summary.json" \\
    --package="./package.json"
`;
const meow_options = {
    flags: {
        debug: {
            type: "boolean",
            alias: "d",
            default: false
        },
        elasticUrl: {
            type: "string",
            alias: "url",
            default: "http://localhost:9200"
        },
        index: {
            type: "string",
            alias: "ix",
        },
        appName: { type: "string" },
        appVersion: { type: "string" },
        file: {
            type: "string",
            alias: "f",
            default: "coverage-summary.json"
        },
        package: {
            type: "string",
        }
    },
    autoHelp: true
};

const cli = meow(meow_help, meow_options);

const D = cli.flags.debug;

if (D) {
    console.log("... flags", cli.flags);
}

if (!cli.flags.index) {
    cli.showHelp();
    return;
}

if (cli.flags.package) {
    /** expect npm-package.json file (https://docs.npmjs.com/files/package.json)
     { 
         name: 'xxx'
         version: 'yyyy'
         ...
        }
        */
    const package = require(cli.flags.package);
    cli.flags.appName = package.name;
    cli.flags.appVersion = package.version;
}

if (!cli.flags.appName || !cli.flags.appVersion) {
    throw Error("Missing application name & version or path to package.json");
}

console.info(".. read metrics");

// load coverage-summary.json file
const coverageSummary = require(cli.flags.file);

/** expect coverage-summary.json file generated by istanbul
     https://github.com/istanbuljs/istanbuljs/blob/aae256fb8b9a3d19414dcf069c592e88712c32c6/packages/istanbul-reports/lib/json-summary/index.js#L8
     {
         "total": {
             "lines":{"total":1617,"covered":787,"skipped":0,"pct":48.67},
             "statements":{"total":1662,"covered":797,"skipped":0,"pct":47.95},
             "functions":{"total":454,"covered":154,"skipped":0,"pct":33.92},
             "branches":{"total":789,"covered":234,"skipped":0,"pct":29.66}
            }
            ...
        }
        */
if (!coverageSummary || !coverageSummary.total) {
    throw Error("Invalid format: coverage-summary.json");
}

if (D) {
    console.log("... metrics", coverageSummary.total);
}

run(cli.flags, coverageSummary);

async function run(flags, coverageSummary) {

    console.info(".. send to elastic search");
    const es = new Client({ node: flags.elasticUrl });
    try {
        const now = formatDate(new Date());
        const result = await es.index({
            index: formatIndex(flags.index, now),
            body: {
                appName: flags.appName,
                appVersion: flags.appVersion,
                "@timestamp": now.date,
                total: coverageSummary.total
            }
        });
        if (!result || result.warnings) {
            console.warn("warning", result);
        } else {
            console.info(".. finished");
            console.log(`${result.statusCode}` + ` ${result.headers.location}`);
        }
        if (D) {
            console.log("... response", result);
        }
    } catch (ex) {
        console.error(ex);
    }
}
function formatDate(date) {
    return {
        date,
        year: date.getFullYear(),
        month: ("" + (date.getMonth() + 1)).padStart(2, "0")
    };
}
function formatIndex(indexName, values) {
    indexName = indexName.replace("YYYY", values.year);
    indexName = indexName.replace("MM", values.month);
    return indexName;
}
